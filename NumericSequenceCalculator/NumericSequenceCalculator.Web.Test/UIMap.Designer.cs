// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace NumericSequenceCalculator.Web.Test
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// GetAllNumberSequence - Use 'GetAllNumberSequenceParams' to pass parameters into this method.
        /// </summary>
        public void GetAllNumberSequence()
        {
            #region Variable Declarations
            HtmlEdit uINumberEdit = this.UINumericSequenceCalcuWindow.UINumericSequenceCalcuDocument.UINumberEdit;
            HtmlInputButton uIGetAllNumberSequenceButton = this.UINumericSequenceCalcuWindow.UINumericSequenceCalcuDocument.UIForm0Custom.UIGetAllNumberSequenceButton;
            #endregion

            // Type '25' in 'Number' text box
            uINumberEdit.Text = this.GetAllNumberSequenceParams.UINumberEditText;

            // Click 'Get All Number Sequence' button
            Mouse.Click(uIGetAllNumberSequenceButton, new Point(140, 26));
        }
        
        /// <summary>
        /// GetAllNumberSequenceAssert - Use 'GetAllNumberSequenceAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void GetAllNumberSequenceAssert()
        {
            #region Variable Declarations
            HtmlDiv uIResults12345678Pane = this.UINumericSequenceCalcuWindow.UINumericSequenceCalcuDocument.UIGetAllNumbersPane.UIResults12345678Pane;
            #endregion

            // Verify that the 'TagName' property of 'Results: 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ,' pane equals 'DIV'
            Assert.AreEqual(this.GetAllNumberSequenceAssertExpectedValues.UIResults12345678PaneTagName, uIResults12345678Pane.TagName);
        }
        
        /// <summary>
        /// GetOddNumberSequence - Use 'GetOddNumberSequenceParams' to pass parameters into this method.
        /// </summary>
        public void GetOddNumberSequence()
        {
            #region Variable Declarations
            HtmlEdit uINumberEdit1 = this.UINumericSequenceCalcuWindow.UINumericSequenceCalcuDocument.UINumberEdit1;
            HtmlInputButton uIGetOddNumberSequenceButton = this.UINumericSequenceCalcuWindow.UINumericSequenceCalcuDocument.UIForm1Custom.UIGetOddNumberSequenceButton;
            #endregion

            // Type '25' in 'Number' text box
            uINumberEdit1.Text = this.GetOddNumberSequenceParams.UINumberEdit1Text;

            // Click 'Get Odd Number Sequence' button
            Mouse.Click(uIGetOddNumberSequenceButton, new Point(133, 26));
        }
        
        /// <summary>
        /// GetOddNumberSequenceAssert - Use 'GetOddNumberSequenceAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void GetOddNumberSequenceAssert()
        {
            #region Variable Declarations
            HtmlDiv uIResults1357911131Pane = this.UINumericSequenceCalcuWindow.UINumericSequenceCalcuDocument.UIGetOddNumbersPane.UIResults1357911131Pane;
            #endregion

            // Verify that the 'TagName' property of 'Results: 1 , 3 , 5 , 7 , 9 , 11 , 13 , 1' pane equals 'DIV'
            Assert.AreEqual(this.GetOddNumberSequenceAssertExpectedValues.UIResults1357911131PaneTagName, uIResults1357911131Pane.TagName);
        }
        
        /// <summary>
        /// GetEvenNumberSequence - Use 'GetEvenNumberSequenceParams' to pass parameters into this method.
        /// </summary>
        public void GetEvenNumberSequence()
        {
            #region Variable Declarations
            HtmlEdit uINumberEdit2 = this.UINumericSequenceCalcuWindow.UINumericSequenceCalcuDocument.UINumberEdit2;
            HtmlInputButton uIGetEvenNumberSequencButton = this.UINumericSequenceCalcuWindow.UINumericSequenceCalcuDocument.UIForm2Custom.UIGetEvenNumberSequencButton;
            #endregion

            // Type '25' in 'Number' text box
            uINumberEdit2.Text = this.GetEvenNumberSequenceParams.UINumberEdit2Text;

            // Click 'Get Even Number Sequence' button
            Mouse.Click(uIGetEvenNumberSequencButton, new Point(82, 32));
        }
        
        /// <summary>
        /// GetEvenNumberSequenceAssert - Use 'GetEvenNumberSequenceAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void GetEvenNumberSequenceAssert()
        {
            #region Variable Declarations
            HtmlDiv uIResults2468101214Pane = this.UINumericSequenceCalcuWindow.UINumericSequenceCalcuDocument.UIGetEvenNumbersPane.UIResults2468101214Pane;
            #endregion

            // Verify that the 'TagName' property of 'Results: 2 , 4 , 6 , 8 , 10 , 12 , 14 ,' pane equals 'DIV'
            Assert.AreEqual(this.GetEvenNumberSequenceAssertExpectedValues.UIResults2468101214PaneTagName, uIResults2468101214Pane.TagName);
        }
        
        /// <summary>
        /// GetAllNumberOfMultipleSequence - Use 'GetAllNumberOfMultipleSequenceParams' to pass parameters into this method.
        /// </summary>
        public void GetAllNumberOfMultipleSequence()
        {
            #region Variable Declarations
            HtmlEdit uINumberEdit3 = this.UINumericSequenceCalcuWindow.UINumericSequenceCalcuDocument.UINumberEdit3;
            HtmlInputButton uIGetAllNumberofMultipButton = this.UINumericSequenceCalcuWindow.UINumericSequenceCalcuDocument.UIForm3Custom.UIGetAllNumberofMultipButton;
            #endregion

            // Type '25' in 'Number' text box
            uINumberEdit3.Text = this.GetAllNumberOfMultipleSequenceParams.UINumberEdit3Text;

            // Click 'Get All Number of Multiple Sequence' button
            Mouse.Click(uIGetAllNumberofMultipButton, new Point(141, 35));
        }
        
        /// <summary>
        /// GetAllNumberOfMultipleSequenceAssert - Use 'GetAllNumberOfMultipleSequenceAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void GetAllNumberOfMultipleSequenceAssert()
        {
            #region Variable Declarations
            HtmlDiv uIResults12C4EC78Pane = this.UINumericSequenceCalcuWindow.UINumericSequenceCalcuDocument.UIGetAllNumbersMultiplPane.UIResults12C4EC78Pane;
            #endregion

            // Verify that the 'TagName' property of 'Results: 1 , 2 , C , 4 , E , C , 7 , 8 ,' pane equals 'DIV'
            Assert.AreEqual(this.GetAllNumberOfMultipleSequenceAssertExpectedValues.UIResults12C4EC78PaneTagName, uIResults12C4EC78Pane.TagName);
        }
        
        /// <summary>
        /// GetFibonacciSequence - Use 'GetFibonacciSequenceParams' to pass parameters into this method.
        /// </summary>
        public void GetFibonacciSequence()
        {
            #region Variable Declarations
            HtmlEdit uINumberEdit4 = this.UINumericSequenceCalcuWindow.UINumericSequenceCalcuDocument.UINumberEdit4;
            HtmlInputButton uIGetFibonacciSequenceButton = this.UINumericSequenceCalcuWindow.UINumericSequenceCalcuDocument.UIForm4Custom.UIGetFibonacciSequenceButton;
            #endregion

            // Type '399' in 'Number' text box
            uINumberEdit4.Text = this.GetFibonacciSequenceParams.UINumberEdit4Text;

            // Click 'Get Fibonacci Sequence' button
            Mouse.Click(uIGetFibonacciSequenceButton, new Point(46, 35));
        }
        
        /// <summary>
        /// GetFibonacciSequenceAssert - Use 'GetFibonacciSequenceAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void GetFibonacciSequenceAssert()
        {
            #region Variable Declarations
            HtmlDiv uIResults011235813Pane = this.UINumericSequenceCalcuWindow.UINumericSequenceCalcuDocument.UIGetFibonacciSequencePane.UIResults011235813Pane;
            #endregion

            // Verify that the 'TagName' property of 'Results: 0 , 1 , 1 , 2 , 3 , 5 , 8 , 13' pane equals 'DIV'
            Assert.AreEqual(this.GetFibonacciSequenceAssertExpectedValues.UIResults011235813PaneTagName, uIResults011235813Pane.TagName);
        }
        
        #region Properties
        public virtual GetAllNumberSequenceParams GetAllNumberSequenceParams
        {
            get
            {
                if ((this.mGetAllNumberSequenceParams == null))
                {
                    this.mGetAllNumberSequenceParams = new GetAllNumberSequenceParams();
                }
                return this.mGetAllNumberSequenceParams;
            }
        }
        
        public virtual GetAllNumberSequenceAssertExpectedValues GetAllNumberSequenceAssertExpectedValues
        {
            get
            {
                if ((this.mGetAllNumberSequenceAssertExpectedValues == null))
                {
                    this.mGetAllNumberSequenceAssertExpectedValues = new GetAllNumberSequenceAssertExpectedValues();
                }
                return this.mGetAllNumberSequenceAssertExpectedValues;
            }
        }
        
        public virtual GetOddNumberSequenceParams GetOddNumberSequenceParams
        {
            get
            {
                if ((this.mGetOddNumberSequenceParams == null))
                {
                    this.mGetOddNumberSequenceParams = new GetOddNumberSequenceParams();
                }
                return this.mGetOddNumberSequenceParams;
            }
        }
        
        public virtual GetOddNumberSequenceAssertExpectedValues GetOddNumberSequenceAssertExpectedValues
        {
            get
            {
                if ((this.mGetOddNumberSequenceAssertExpectedValues == null))
                {
                    this.mGetOddNumberSequenceAssertExpectedValues = new GetOddNumberSequenceAssertExpectedValues();
                }
                return this.mGetOddNumberSequenceAssertExpectedValues;
            }
        }
        
        public virtual GetEvenNumberSequenceParams GetEvenNumberSequenceParams
        {
            get
            {
                if ((this.mGetEvenNumberSequenceParams == null))
                {
                    this.mGetEvenNumberSequenceParams = new GetEvenNumberSequenceParams();
                }
                return this.mGetEvenNumberSequenceParams;
            }
        }
        
        public virtual GetEvenNumberSequenceAssertExpectedValues GetEvenNumberSequenceAssertExpectedValues
        {
            get
            {
                if ((this.mGetEvenNumberSequenceAssertExpectedValues == null))
                {
                    this.mGetEvenNumberSequenceAssertExpectedValues = new GetEvenNumberSequenceAssertExpectedValues();
                }
                return this.mGetEvenNumberSequenceAssertExpectedValues;
            }
        }
        
        public virtual GetAllNumberOfMultipleSequenceParams GetAllNumberOfMultipleSequenceParams
        {
            get
            {
                if ((this.mGetAllNumberOfMultipleSequenceParams == null))
                {
                    this.mGetAllNumberOfMultipleSequenceParams = new GetAllNumberOfMultipleSequenceParams();
                }
                return this.mGetAllNumberOfMultipleSequenceParams;
            }
        }
        
        public virtual GetAllNumberOfMultipleSequenceAssertExpectedValues GetAllNumberOfMultipleSequenceAssertExpectedValues
        {
            get
            {
                if ((this.mGetAllNumberOfMultipleSequenceAssertExpectedValues == null))
                {
                    this.mGetAllNumberOfMultipleSequenceAssertExpectedValues = new GetAllNumberOfMultipleSequenceAssertExpectedValues();
                }
                return this.mGetAllNumberOfMultipleSequenceAssertExpectedValues;
            }
        }
        
        public virtual GetFibonacciSequenceParams GetFibonacciSequenceParams
        {
            get
            {
                if ((this.mGetFibonacciSequenceParams == null))
                {
                    this.mGetFibonacciSequenceParams = new GetFibonacciSequenceParams();
                }
                return this.mGetFibonacciSequenceParams;
            }
        }
        
        public virtual GetFibonacciSequenceAssertExpectedValues GetFibonacciSequenceAssertExpectedValues
        {
            get
            {
                if ((this.mGetFibonacciSequenceAssertExpectedValues == null))
                {
                    this.mGetFibonacciSequenceAssertExpectedValues = new GetFibonacciSequenceAssertExpectedValues();
                }
                return this.mGetFibonacciSequenceAssertExpectedValues;
            }
        }
        
        public UINumericSequenceCalcuWindow UINumericSequenceCalcuWindow
        {
            get
            {
                if ((this.mUINumericSequenceCalcuWindow == null))
                {
                    this.mUINumericSequenceCalcuWindow = new UINumericSequenceCalcuWindow();
                }
                return this.mUINumericSequenceCalcuWindow;
            }
        }
        #endregion
        
        #region Fields
        private GetAllNumberSequenceParams mGetAllNumberSequenceParams;
        
        private GetAllNumberSequenceAssertExpectedValues mGetAllNumberSequenceAssertExpectedValues;
        
        private GetOddNumberSequenceParams mGetOddNumberSequenceParams;
        
        private GetOddNumberSequenceAssertExpectedValues mGetOddNumberSequenceAssertExpectedValues;
        
        private GetEvenNumberSequenceParams mGetEvenNumberSequenceParams;
        
        private GetEvenNumberSequenceAssertExpectedValues mGetEvenNumberSequenceAssertExpectedValues;
        
        private GetAllNumberOfMultipleSequenceParams mGetAllNumberOfMultipleSequenceParams;
        
        private GetAllNumberOfMultipleSequenceAssertExpectedValues mGetAllNumberOfMultipleSequenceAssertExpectedValues;
        
        private GetFibonacciSequenceParams mGetFibonacciSequenceParams;
        
        private GetFibonacciSequenceAssertExpectedValues mGetFibonacciSequenceAssertExpectedValues;
        
        private UINumericSequenceCalcuWindow mUINumericSequenceCalcuWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'GetAllNumberSequence'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class GetAllNumberSequenceParams
    {
        
        #region Fields
        /// <summary>
        /// Type '25' in 'Number' text box
        /// </summary>
        public string UINumberEditText = "25";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'GetAllNumberSequenceAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class GetAllNumberSequenceAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TagName' property of 'Results: 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ,' pane equals 'DIV'
        /// </summary>
        public string UIResults12345678PaneTagName = "DIV";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'GetOddNumberSequence'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class GetOddNumberSequenceParams
    {
        
        #region Fields
        /// <summary>
        /// Type '25' in 'Number' text box
        /// </summary>
        public string UINumberEdit1Text = "25";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'GetOddNumberSequenceAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class GetOddNumberSequenceAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TagName' property of 'Results: 1 , 3 , 5 , 7 , 9 , 11 , 13 , 1' pane equals 'DIV'
        /// </summary>
        public string UIResults1357911131PaneTagName = "DIV";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'GetEvenNumberSequence'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class GetEvenNumberSequenceParams
    {
        
        #region Fields
        /// <summary>
        /// Type '25' in 'Number' text box
        /// </summary>
        public string UINumberEdit2Text = "25";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'GetEvenNumberSequenceAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class GetEvenNumberSequenceAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TagName' property of 'Results: 2 , 4 , 6 , 8 , 10 , 12 , 14 ,' pane equals 'DIV'
        /// </summary>
        public string UIResults2468101214PaneTagName = "DIV";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'GetAllNumberOfMultipleSequence'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class GetAllNumberOfMultipleSequenceParams
    {
        
        #region Fields
        /// <summary>
        /// Type '25' in 'Number' text box
        /// </summary>
        public string UINumberEdit3Text = "25";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'GetAllNumberOfMultipleSequenceAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class GetAllNumberOfMultipleSequenceAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TagName' property of 'Results: 1 , 2 , C , 4 , E , C , 7 , 8 ,' pane equals 'DIV'
        /// </summary>
        public string UIResults12C4EC78PaneTagName = "DIV";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'GetFibonacciSequence'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class GetFibonacciSequenceParams
    {
        
        #region Fields
        /// <summary>
        /// Type '399' in 'Number' text box
        /// </summary>
        public string UINumberEdit4Text = "399";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'GetFibonacciSequenceAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class GetFibonacciSequenceAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'TagName' property of 'Results: 0 , 1 , 1 , 2 , 3 , 5 , 8 , 13' pane equals 'DIV'
        /// </summary>
        public string UIResults011235813PaneTagName = "DIV";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UINumericSequenceCalcuWindow : BrowserWindow
    {
        
        public UINumericSequenceCalcuWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Numeric Sequence Calculator - My ASP.NET MVC Application";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Numeric Sequence Calculator - My ASP.NET MVC Application");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UINumericSequenceCalcuDocument UINumericSequenceCalcuDocument
        {
            get
            {
                if ((this.mUINumericSequenceCalcuDocument == null))
                {
                    this.mUINumericSequenceCalcuDocument = new UINumericSequenceCalcuDocument(this);
                }
                return this.mUINumericSequenceCalcuDocument;
            }
        }
        #endregion
        
        #region Fields
        private UINumericSequenceCalcuDocument mUINumericSequenceCalcuDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UINumericSequenceCalcuDocument : HtmlDocument
    {
        
        public UINumericSequenceCalcuDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Numeric Sequence Calculator - My ASP.NET MVC Application";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:49393/";
            this.WindowTitles.Add("Numeric Sequence Calculator - My ASP.NET MVC Application");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UINumberEdit
        {
            get
            {
                if ((this.mUINumberEdit == null))
                {
                    this.mUINumberEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUINumberEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "id";
                    this.mUINumberEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Number";
                    this.mUINumberEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUINumberEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUINumberEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUINumberEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUINumberEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Number\" id=\"id\" type=\"text\" value=";
                    this.mUINumberEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "1";
                    this.mUINumberEdit.WindowTitles.Add("Numeric Sequence Calculator - My ASP.NET MVC Application");
                    #endregion
                }
                return this.mUINumberEdit;
            }
        }
        
        public UIForm0Custom UIForm0Custom
        {
            get
            {
                if ((this.mUIForm0Custom == null))
                {
                    this.mUIForm0Custom = new UIForm0Custom(this);
                }
                return this.mUIForm0Custom;
            }
        }
        
        public UIGetAllNumbersPane UIGetAllNumbersPane
        {
            get
            {
                if ((this.mUIGetAllNumbersPane == null))
                {
                    this.mUIGetAllNumbersPane = new UIGetAllNumbersPane(this);
                }
                return this.mUIGetAllNumbersPane;
            }
        }
        
        public HtmlEdit UINumberEdit1
        {
            get
            {
                if ((this.mUINumberEdit1 == null))
                {
                    this.mUINumberEdit1 = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUINumberEdit1.SearchProperties[HtmlEdit.PropertyNames.Id] = "id";
                    this.mUINumberEdit1.SearchProperties[HtmlEdit.PropertyNames.Name] = "Number";
                    this.mUINumberEdit1.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUINumberEdit1.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUINumberEdit1.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUINumberEdit1.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUINumberEdit1.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Number\" id=\"id\" type=\"text\" value=";
                    this.mUINumberEdit1.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "3";
                    this.mUINumberEdit1.WindowTitles.Add("Numeric Sequence Calculator - My ASP.NET MVC Application");
                    #endregion
                }
                return this.mUINumberEdit1;
            }
        }
        
        public UIForm1Custom UIForm1Custom
        {
            get
            {
                if ((this.mUIForm1Custom == null))
                {
                    this.mUIForm1Custom = new UIForm1Custom(this);
                }
                return this.mUIForm1Custom;
            }
        }
        
        public UIGetOddNumbersPane UIGetOddNumbersPane
        {
            get
            {
                if ((this.mUIGetOddNumbersPane == null))
                {
                    this.mUIGetOddNumbersPane = new UIGetOddNumbersPane(this);
                }
                return this.mUIGetOddNumbersPane;
            }
        }
        
        public HtmlEdit UINumberEdit2
        {
            get
            {
                if ((this.mUINumberEdit2 == null))
                {
                    this.mUINumberEdit2 = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUINumberEdit2.SearchProperties[HtmlEdit.PropertyNames.Id] = "id";
                    this.mUINumberEdit2.SearchProperties[HtmlEdit.PropertyNames.Name] = "Number";
                    this.mUINumberEdit2.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUINumberEdit2.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUINumberEdit2.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUINumberEdit2.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUINumberEdit2.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Number\" id=\"id\" type=\"text\" value=";
                    this.mUINumberEdit2.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "5";
                    this.mUINumberEdit2.WindowTitles.Add("Numeric Sequence Calculator - My ASP.NET MVC Application");
                    #endregion
                }
                return this.mUINumberEdit2;
            }
        }
        
        public UIForm2Custom UIForm2Custom
        {
            get
            {
                if ((this.mUIForm2Custom == null))
                {
                    this.mUIForm2Custom = new UIForm2Custom(this);
                }
                return this.mUIForm2Custom;
            }
        }
        
        public UIGetEvenNumbersPane UIGetEvenNumbersPane
        {
            get
            {
                if ((this.mUIGetEvenNumbersPane == null))
                {
                    this.mUIGetEvenNumbersPane = new UIGetEvenNumbersPane(this);
                }
                return this.mUIGetEvenNumbersPane;
            }
        }
        
        public HtmlEdit UINumberEdit3
        {
            get
            {
                if ((this.mUINumberEdit3 == null))
                {
                    this.mUINumberEdit3 = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUINumberEdit3.SearchProperties[HtmlEdit.PropertyNames.Id] = "id";
                    this.mUINumberEdit3.SearchProperties[HtmlEdit.PropertyNames.Name] = "Number";
                    this.mUINumberEdit3.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUINumberEdit3.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUINumberEdit3.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUINumberEdit3.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUINumberEdit3.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Number\" id=\"id\" type=\"text\" value=";
                    this.mUINumberEdit3.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "7";
                    this.mUINumberEdit3.WindowTitles.Add("Numeric Sequence Calculator - My ASP.NET MVC Application");
                    #endregion
                }
                return this.mUINumberEdit3;
            }
        }
        
        public UIForm3Custom UIForm3Custom
        {
            get
            {
                if ((this.mUIForm3Custom == null))
                {
                    this.mUIForm3Custom = new UIForm3Custom(this);
                }
                return this.mUIForm3Custom;
            }
        }
        
        public UIGetAllNumbersMultiplPane UIGetAllNumbersMultiplPane
        {
            get
            {
                if ((this.mUIGetAllNumbersMultiplPane == null))
                {
                    this.mUIGetAllNumbersMultiplPane = new UIGetAllNumbersMultiplPane(this);
                }
                return this.mUIGetAllNumbersMultiplPane;
            }
        }
        
        public HtmlEdit UINumberEdit4
        {
            get
            {
                if ((this.mUINumberEdit4 == null))
                {
                    this.mUINumberEdit4 = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUINumberEdit4.SearchProperties[HtmlEdit.PropertyNames.Id] = "id";
                    this.mUINumberEdit4.SearchProperties[HtmlEdit.PropertyNames.Name] = "Number";
                    this.mUINumberEdit4.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUINumberEdit4.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUINumberEdit4.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUINumberEdit4.FilterProperties[HtmlEdit.PropertyNames.Class] = null;
                    this.mUINumberEdit4.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Number\" id=\"id\" type=\"text\" value=";
                    this.mUINumberEdit4.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "9";
                    this.mUINumberEdit4.WindowTitles.Add("Numeric Sequence Calculator - My ASP.NET MVC Application");
                    #endregion
                }
                return this.mUINumberEdit4;
            }
        }
        
        public UIForm4Custom UIForm4Custom
        {
            get
            {
                if ((this.mUIForm4Custom == null))
                {
                    this.mUIForm4Custom = new UIForm4Custom(this);
                }
                return this.mUIForm4Custom;
            }
        }
        
        public UIGetFibonacciSequencePane UIGetFibonacciSequencePane
        {
            get
            {
                if ((this.mUIGetFibonacciSequencePane == null))
                {
                    this.mUIGetFibonacciSequencePane = new UIGetFibonacciSequencePane(this);
                }
                return this.mUIGetFibonacciSequencePane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUINumberEdit;
        
        private UIForm0Custom mUIForm0Custom;
        
        private UIGetAllNumbersPane mUIGetAllNumbersPane;
        
        private HtmlEdit mUINumberEdit1;
        
        private UIForm1Custom mUIForm1Custom;
        
        private UIGetOddNumbersPane mUIGetOddNumbersPane;
        
        private HtmlEdit mUINumberEdit2;
        
        private UIForm2Custom mUIForm2Custom;
        
        private UIGetEvenNumbersPane mUIGetEvenNumbersPane;
        
        private HtmlEdit mUINumberEdit3;
        
        private UIForm3Custom mUIForm3Custom;
        
        private UIGetAllNumbersMultiplPane mUIGetAllNumbersMultiplPane;
        
        private HtmlEdit mUINumberEdit4;
        
        private UIForm4Custom mUIForm4Custom;
        
        private UIGetFibonacciSequencePane mUIGetFibonacciSequencePane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIForm0Custom : HtmlCustom
    {
        
        public UIForm0Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties["TagName"] = "FORM";
            this.SearchProperties["Id"] = "form0";
            this.SearchProperties[UITestControl.PropertyNames.Name] = null;
            this.FilterProperties["Class"] = null;
            this.FilterProperties["ControlDefinition"] = "id=\"form0\" action=\"/Home/GetAllNumbers\" ";
            this.FilterProperties["TagInstance"] = "1";
            this.WindowTitles.Add("Numeric Sequence Calculator - My ASP.NET MVC Application");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIGetAllNumberSequenceButton
        {
            get
            {
                if ((this.mUIGetAllNumberSequenceButton == null))
                {
                    this.mUIGetAllNumberSequenceButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIGetAllNumberSequenceButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUIGetAllNumberSequenceButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUIGetAllNumberSequenceButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Get All Number Sequence";
                    this.mUIGetAllNumberSequenceButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIGetAllNumberSequenceButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIGetAllNumberSequenceButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUIGetAllNumberSequenceButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "type=\"submit\" value=\"Get All Number Sequ";
                    this.mUIGetAllNumberSequenceButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "2";
                    this.mUIGetAllNumberSequenceButton.WindowTitles.Add("Numeric Sequence Calculator - My ASP.NET MVC Application");
                    #endregion
                }
                return this.mUIGetAllNumberSequenceButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIGetAllNumberSequenceButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIGetAllNumbersPane : HtmlDiv
    {
        
        public UIGetAllNumbersPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "GetAllNumbers";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Results: 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ,";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"GetAllNumbers\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "4";
            this.WindowTitles.Add("Numeric Sequence Calculator - My ASP.NET MVC Application");
            #endregion
        }
        
        #region Properties
        public HtmlDiv UIResults12345678Pane
        {
            get
            {
                if ((this.mUIResults12345678Pane == null))
                {
                    this.mUIResults12345678Pane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIResults12345678Pane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIResults12345678Pane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIResults12345678Pane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Results: 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ,";
                    this.mUIResults12345678Pane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIResults12345678Pane.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mUIResults12345678Pane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = null;
                    this.mUIResults12345678Pane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "5";
                    this.mUIResults12345678Pane.WindowTitles.Add("Numeric Sequence Calculator - My ASP.NET MVC Application");
                    #endregion
                }
                return this.mUIResults12345678Pane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUIResults12345678Pane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIForm1Custom : HtmlCustom
    {
        
        public UIForm1Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties["TagName"] = "FORM";
            this.SearchProperties["Id"] = "form1";
            this.SearchProperties[UITestControl.PropertyNames.Name] = null;
            this.FilterProperties["Class"] = null;
            this.FilterProperties["ControlDefinition"] = "id=\"form1\" action=\"/Home/GetOddNumbers\" ";
            this.FilterProperties["TagInstance"] = "2";
            this.WindowTitles.Add("Numeric Sequence Calculator - My ASP.NET MVC Application");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIGetOddNumberSequenceButton
        {
            get
            {
                if ((this.mUIGetOddNumberSequenceButton == null))
                {
                    this.mUIGetOddNumberSequenceButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIGetOddNumberSequenceButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUIGetOddNumberSequenceButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUIGetOddNumberSequenceButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Get Odd Number Sequence";
                    this.mUIGetOddNumberSequenceButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIGetOddNumberSequenceButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIGetOddNumberSequenceButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUIGetOddNumberSequenceButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "type=\"submit\" value=\"Get Odd Number Sequ";
                    this.mUIGetOddNumberSequenceButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "2";
                    this.mUIGetOddNumberSequenceButton.WindowTitles.Add("Numeric Sequence Calculator - My ASP.NET MVC Application");
                    #endregion
                }
                return this.mUIGetOddNumberSequenceButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIGetOddNumberSequenceButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIGetOddNumbersPane : HtmlDiv
    {
        
        public UIGetOddNumbersPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "GetOddNumbers";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Results: 1 , 3 , 5 , 7 , 9 , 11 , 13 , 1";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"GetOddNumbers\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "6";
            this.WindowTitles.Add("Numeric Sequence Calculator - My ASP.NET MVC Application");
            #endregion
        }
        
        #region Properties
        public HtmlDiv UIResults1357911131Pane
        {
            get
            {
                if ((this.mUIResults1357911131Pane == null))
                {
                    this.mUIResults1357911131Pane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIResults1357911131Pane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIResults1357911131Pane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIResults1357911131Pane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Results: 1 , 3 , 5 , 7 , 9 , 11 , 13 , 1";
                    this.mUIResults1357911131Pane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIResults1357911131Pane.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mUIResults1357911131Pane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = null;
                    this.mUIResults1357911131Pane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "7";
                    this.mUIResults1357911131Pane.WindowTitles.Add("Numeric Sequence Calculator - My ASP.NET MVC Application");
                    #endregion
                }
                return this.mUIResults1357911131Pane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUIResults1357911131Pane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIForm2Custom : HtmlCustom
    {
        
        public UIForm2Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties["TagName"] = "FORM";
            this.SearchProperties["Id"] = "form2";
            this.SearchProperties[UITestControl.PropertyNames.Name] = null;
            this.FilterProperties["Class"] = null;
            this.FilterProperties["ControlDefinition"] = "id=\"form2\" action=\"/Home/GetEvenNumbers\"";
            this.FilterProperties["TagInstance"] = "3";
            this.WindowTitles.Add("Numeric Sequence Calculator - My ASP.NET MVC Application");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIGetEvenNumberSequencButton
        {
            get
            {
                if ((this.mUIGetEvenNumberSequencButton == null))
                {
                    this.mUIGetEvenNumberSequencButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIGetEvenNumberSequencButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUIGetEvenNumberSequencButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUIGetEvenNumberSequencButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Get Even Number Sequence";
                    this.mUIGetEvenNumberSequencButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIGetEvenNumberSequencButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIGetEvenNumberSequencButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUIGetEvenNumberSequencButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "type=\"submit\" value=\"Get Even Number Seq";
                    this.mUIGetEvenNumberSequencButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "2";
                    this.mUIGetEvenNumberSequencButton.WindowTitles.Add("Numeric Sequence Calculator - My ASP.NET MVC Application");
                    #endregion
                }
                return this.mUIGetEvenNumberSequencButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIGetEvenNumberSequencButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIGetEvenNumbersPane : HtmlDiv
    {
        
        public UIGetEvenNumbersPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "GetEvenNumbers";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Results: 2 , 4 , 6 , 8 , 10 , 12 , 14 , ";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"GetEvenNumbers\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "8";
            this.WindowTitles.Add("Numeric Sequence Calculator - My ASP.NET MVC Application");
            #endregion
        }
        
        #region Properties
        public HtmlDiv UIResults2468101214Pane
        {
            get
            {
                if ((this.mUIResults2468101214Pane == null))
                {
                    this.mUIResults2468101214Pane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIResults2468101214Pane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIResults2468101214Pane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIResults2468101214Pane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Results: 2 , 4 , 6 , 8 , 10 , 12 , 14 , ";
                    this.mUIResults2468101214Pane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIResults2468101214Pane.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mUIResults2468101214Pane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = null;
                    this.mUIResults2468101214Pane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "9";
                    this.mUIResults2468101214Pane.WindowTitles.Add("Numeric Sequence Calculator - My ASP.NET MVC Application");
                    #endregion
                }
                return this.mUIResults2468101214Pane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUIResults2468101214Pane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIForm3Custom : HtmlCustom
    {
        
        public UIForm3Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties["TagName"] = "FORM";
            this.SearchProperties["Id"] = "form3";
            this.SearchProperties[UITestControl.PropertyNames.Name] = null;
            this.FilterProperties["Class"] = null;
            this.FilterProperties["ControlDefinition"] = "id=\"form3\" action=\"/Home/GetAllNumbersMu";
            this.FilterProperties["TagInstance"] = "4";
            this.WindowTitles.Add("Numeric Sequence Calculator - My ASP.NET MVC Application");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIGetAllNumberofMultipButton
        {
            get
            {
                if ((this.mUIGetAllNumberofMultipButton == null))
                {
                    this.mUIGetAllNumberofMultipButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIGetAllNumberofMultipButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUIGetAllNumberofMultipButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUIGetAllNumberofMultipButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Get All Number of Multiple Sequence";
                    this.mUIGetAllNumberofMultipButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIGetAllNumberofMultipButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIGetAllNumberofMultipButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUIGetAllNumberofMultipButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "type=\"submit\" value=\"Get All Number of M";
                    this.mUIGetAllNumberofMultipButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "2";
                    this.mUIGetAllNumberofMultipButton.WindowTitles.Add("Numeric Sequence Calculator - My ASP.NET MVC Application");
                    #endregion
                }
                return this.mUIGetAllNumberofMultipButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIGetAllNumberofMultipButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIGetAllNumbersMultiplPane : HtmlDiv
    {
        
        public UIGetAllNumbersMultiplPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "GetAllNumbersMultiple";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Results: 1 , 2 , C , 4 , E , C , 7 , 8 ,";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"GetAllNumbersMultiple\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "10";
            this.WindowTitles.Add("Numeric Sequence Calculator - My ASP.NET MVC Application");
            #endregion
        }
        
        #region Properties
        public HtmlDiv UIResults12C4EC78Pane
        {
            get
            {
                if ((this.mUIResults12C4EC78Pane == null))
                {
                    this.mUIResults12C4EC78Pane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIResults12C4EC78Pane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIResults12C4EC78Pane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIResults12C4EC78Pane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Results: 1 , 2 , C , 4 , E , C , 7 , 8 ,";
                    this.mUIResults12C4EC78Pane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIResults12C4EC78Pane.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mUIResults12C4EC78Pane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = null;
                    this.mUIResults12C4EC78Pane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "11";
                    this.mUIResults12C4EC78Pane.WindowTitles.Add("Numeric Sequence Calculator - My ASP.NET MVC Application");
                    #endregion
                }
                return this.mUIResults12C4EC78Pane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUIResults12C4EC78Pane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIForm4Custom : HtmlCustom
    {
        
        public UIForm4Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties["TagName"] = "FORM";
            this.SearchProperties["Id"] = "form4";
            this.SearchProperties[UITestControl.PropertyNames.Name] = null;
            this.FilterProperties["Class"] = null;
            this.FilterProperties["ControlDefinition"] = "id=\"form4\" action=\"/Home/GetFibonacciSeq";
            this.FilterProperties["TagInstance"] = "5";
            this.WindowTitles.Add("Numeric Sequence Calculator - My ASP.NET MVC Application");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIGetFibonacciSequenceButton
        {
            get
            {
                if ((this.mUIGetFibonacciSequenceButton == null))
                {
                    this.mUIGetFibonacciSequenceButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIGetFibonacciSequenceButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUIGetFibonacciSequenceButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUIGetFibonacciSequenceButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Get Fibonacci Sequence";
                    this.mUIGetFibonacciSequenceButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIGetFibonacciSequenceButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIGetFibonacciSequenceButton.FilterProperties[HtmlButton.PropertyNames.Class] = null;
                    this.mUIGetFibonacciSequenceButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "type=\"submit\" value=\"Get Fibonacci Seque";
                    this.mUIGetFibonacciSequenceButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "2";
                    this.mUIGetFibonacciSequenceButton.WindowTitles.Add("Numeric Sequence Calculator - My ASP.NET MVC Application");
                    #endregion
                }
                return this.mUIGetFibonacciSequenceButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIGetFibonacciSequenceButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIGetFibonacciSequencePane : HtmlDiv
    {
        
        public UIGetFibonacciSequencePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "GetFibonacciSequence";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Results: 0 , 1 , 1 , 2 , 3 , 5 , 8 , 13 ";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"GetFibonacciSequence\"";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "12";
            this.WindowTitles.Add("Numeric Sequence Calculator - My ASP.NET MVC Application");
            #endregion
        }
        
        #region Properties
        public HtmlDiv UIResults011235813Pane
        {
            get
            {
                if ((this.mUIResults011235813Pane == null))
                {
                    this.mUIResults011235813Pane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIResults011235813Pane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIResults011235813Pane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIResults011235813Pane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Results: 0 , 1 , 1 , 2 , 3 , 5 , 8 , 13 ";
                    this.mUIResults011235813Pane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIResults011235813Pane.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mUIResults011235813Pane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = null;
                    this.mUIResults011235813Pane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "13";
                    this.mUIResults011235813Pane.WindowTitles.Add("Numeric Sequence Calculator - My ASP.NET MVC Application");
                    #endregion
                }
                return this.mUIResults011235813Pane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUIResults011235813Pane;
        #endregion
    }
}
